using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;

namespace KeyApiClientGenerator
{
    [Generator]
    public class ApiClientSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            GenerateMarkerAttribute(context);
            var markerName = "KeyApiClientGenerator.GenerateApiClientAttribute";
            var markerType = context.Compilation.GetTypeByMetadataName(markerName);

            //foreach (var type in typesToGenerateFor)
            //{
            //    GenerateApiClient(type, context);
            //}
        }

        private void GenerateMarkerAttribute(GeneratorExecutionContext context)
        {
            var source = @"
namespace KeyApiClientGenerator
{
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
    public class GenerateApiClientAttribute : System.Attribute
    {

    }
}
";
            context.AddSource($"GenerateApiClientAttribute.generated.cs", source);
        }

        private void GenerateApiClient(INamedTypeSymbol type, GeneratorExecutionContext context)
        {
            // Build up the source code
            string source = $@"// <auto-generated/>
using System;

namespace KeyApiClientGenerator
{{
    public class TestClass
    {{
        public void HelloFrom(string name) => Console.WriteLine($""Generator says: Hi from '{{name}}'"");
    }}
}}
";
            // Add the source code to the compilation
            context.AddSource($"TestApiClient.generated.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
#if DEBUG
            if (!Debugger.IsAttached)
            {
                Debugger.Launch();
            }
#endif 
        }
    }
}
